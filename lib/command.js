// Generated by CoffeeScript 1.8.0
(function() {
  var content, content2json, contents, extension, format, fs, input, isDirectory, isNewer, name, parser, program, yaml2json, _, _i, _len;

  _ = require('underscore');

  fs = require('fs');

  fs.path = require('path');

  fs.findit = require('findit');

  program = require('commander');

  parser = require('./');

  program.option('-c --convert [markdown|asciidoc|textile]', 'Convert Markdown, AsciiDoc and Textile documents into HTML.').option('-C, --convert-all [markdown|asciidoc|textile]', 'Convert every string into HTML using the markup language of your choice.').option('-f --fussy', 'Be fussy about which documents to interpret as YAML, lax about which to interpret as text.').option('-k --keep-raw', 'Keep raw markup and HTML for parsed strings.').option('-h --human', 'Return a more user-friendly data structure.').option('-I --indent [n]', 'Indent the JSON output.', parseInt, 2).option('-o --output', 'Set output directory.').option('-F --force', 'Parse and convert even if output is newer than input.').parse(process.argv);

  input = fs.path.resolve(program.args[0]);

  isDirectory = (fs.statSync(input)).isDirectory();

  if (isDirectory) {
    throw new Error("Not implemented yet.");
    fs.findit;
  } else {
    contents = [
      fs.readFileSync(input, {
        encoding: 'utf8'
      })
    ];
  }

  format = program.convertAll || program.convert;

  format = typeof format === 'string' ? format : false;

  if (!format) {
    name = input.replace(/\.ya?ml/g, '');
    extension = format || fs.path.extname(name);
    switch (extension) {
      case '.md':
      case '.markdown':
        format = 'markdown';
        break;
      case '.textile':
        format = 'markdown';
        break;
      case '.asciidoc':
      case '.adoc':
        format = 'asciidoc';
    }
  }

  program.format = format;

  isNewer = function(input, output) {
    try {
      input = (fs.statSync(input)).mtime;
      output = (fs.statSync(output)).mtime;
      return input.getTime() > output.getTime();
    } catch (_error) {
      return true;
    }
  };

  yaml2json = function(content, options) {
    var object, serialization;
    object = parser(content, options);
    return serialization = JSON.stringify(object, void 0, options.indent);
  };

  for (_i = 0, _len = contents.length; _i < _len; _i++) {
    content = contents[_i];
    content2json = _.partial(yaml2json, content, program);
    if (program.output) {
      throw new Error("Not implemented yet.");
      if (program.force || isNewer(input, output)) {
        fs.writeFileSync(output, content2json(), {
          encoding: 'utf8'
        });
      }
    } else {
      console.log(content2json());
    }
  }

}).call(this);
