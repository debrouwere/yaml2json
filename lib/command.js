// Generated by CoffeeScript 1.8.0
(function() {
  var format, fs, loader, markup, parse, parser, program, specifiedFormat, yaml2json, _;

  _ = require('underscore');

  fs = require('fs');

  fs.path = require('path');

  fs.mkdirp = require('mkdirp');

  program = require('commander');

  loader = require('./loader');

  markup = require('./markup');

  parser = require('./');

  program.usage('<file ...> [options]').option('-c --convert [markdown|asciidoc|textile]', 'Convert Markdown, AsciiDoc and Textile documents into HTML.').option('-C, --convert-all [markdown|asciidoc|textile]', 'Convert every string into HTML using the markup language of your choice.').option('-f --fussy', 'Be fussy about which documents to interpret as YAML, lax about which to interpret as text.').option('-k --keep-raw', 'Keep raw markup and HTML for parsed strings.').option('-p --prose', 'Return a more user-friendly data structure, suited to simple prose documents.').option('-I --indent [n]', 'Indent the JSON output.', parseInt, 2).option('-o --output <directory>', 'Set output directory.').option('-F --force', 'Parse and convert even if output is newer than input.').parse(process.argv);

  format = program.convertAll || program.convert;

  specifiedFormat = typeof format === 'string' ? format : false;

  parse = function(content, options) {
    var object, serialization;
    object = parser(content, options);
    return serialization = JSON.stringify(object, void 0, options.indent);
  };

  yaml2json = function(content, source, format, root) {
    var content2json, destination, extension, inputDir, outputDir;
    program.format = specifiedFormat || format;
    content2json = _.partial(parse, content, program);
    if (program.output) {
      inputDir = root;
      outputDir = fs.path.resolve(program.output);
      extension = fs.path.extname(source);
      destination = source.replace(inputDir, outputDir).replace(extension, '.json');
      if (program.force || loader.isNewer(source, destination)) {
        fs.mkdirp.sync(fs.path.dirname(destination));
        return fs.writeFileSync(destination, content2json(), {
          encoding: 'utf8'
        });
      }
    } else {
      return console.log(content2json());
    }
  };

  loader.load(program.args, function(err, files, root) {
    var content, path, _i, _len, _ref, _results;
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      _ref = files[_i], content = _ref.content, path = _ref.path, format = _ref.format;
      _results.push(yaml2json(content, path, format, root));
    }
    return _results;
  });

}).call(this);
