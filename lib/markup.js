// Generated by CoffeeScript 1.8.0
(function() {
  var Opal, asciidocOptions, bare, convertObject, convertString, converters, parsers, _;

  _ = require('underscore');

  _.str = require('underscore.string');

  parsers = {
    textile: require('textile-js'),
    markdown: require('markdown'),
    asciidoc: require('asciidoctor.js')
  };

  Opal = parsers.asciidoc().Opal;

  asciidocOptions = Opal.hash2(['doctype', 'attributes'], {
    doctype: 'inline',
    attributes: ['showtitle']
  });

  converters = {
    noop: function(string) {
      return string;
    },
    textile: parsers.textile.parse,
    markdown: parsers.markdown.markdown.toHTML,
    asciidoc: function(string) {
      return parsers.asciidoc().Asciidoctor().$convert(string, asciidocOptions);
    }
  };

  bare = function(string) {
    if (_.str.contains(string, '\n')) {
      return string;
    } else {
      return string.replace(/^<p>(.*)<\/p>$/, '$1');
    }
  };

  exports.string = convertString = function(string, options) {
    var html, wrapper;
    html = converters[options.format](string);
    if (options.keepRaw) {
      wrapper = {
        html: html
      };
      wrapper[options.format] = string;
      return wrapper;
    } else {
      return html;
    }
  };

  exports.object = convertObject = function(obj, options) {
    var convertNestedObject, html, nestedOptions;
    if (obj.constructor === String) {
      html = convertString(obj, options);
      if (options.bare) {
        return bare(html);
      } else {
        return html;
      }
    } else if (options.recursive) {
      nestedOptions = _.extend({
        bare: true
      }, options);
      convertNestedObject = _.partial(convertObject, _, nestedOptions);
      switch (obj.constructor) {
        case Array:
          return _.map(obj, convertNestedObject);
        case Object:
          return _.object(_.map(obj, function(value, key) {
            return [key, convertNestedObject(value)];
          }));
        default:
          return obj;
      }
    } else {
      return obj;
    }
  };

}).call(this);
